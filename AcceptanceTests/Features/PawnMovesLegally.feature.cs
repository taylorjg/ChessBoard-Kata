// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      Runtime Version:2.0.50727.3603
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Moving the Pawn.")]
    public partial class MovingThePawn_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PawnMovesLegally.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Moving the Pawn.", "In order to play chess\nAs a Player\nI want to move the Pawn legally.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn starts on home row and moves 1 space")]
        public virtual void PawnStartsOnHomeRowAndMoves1Space()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn starts on home row and moves 1 space", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("the game has just started");
#line 8
testRunner.And("the Pawn is on B2");
#line 9
testRunner.And("the Knight is at G8");
#line 10
testRunner.When("I move the Pawn to B3");
#line 11
testRunner.Then("I should be shown \"Pawn to B3\"");
#line 12
testRunner.And("Pawn should be at B3");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn starts on home row and moves 2 spaces")]
        public virtual void PawnStartsOnHomeRowAndMoves2Spaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn starts on home row and moves 2 spaces", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("the game has just started");
#line 16
testRunner.And("the Pawn is on E2");
#line 17
testRunner.And("the Knight is at G8");
#line 18
testRunner.When("I move the Pawn to E4");
#line 19
testRunner.Then("I should be shown \"Pawn to E4\"");
#line 20
testRunner.And("Pawn should be at E4");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn cannot move 2 spaces when not first round")]
        public virtual void PawnCannotMove2SpacesWhenNotFirstRound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn cannot move 2 spaces when not first round", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
testRunner.Given("the game has not just started");
#line 24
testRunner.And("the Pawn is on D2");
#line 25
testRunner.And("the Knight is at G8");
#line 26
testRunner.When("I move the Pawn to D4");
#line 27
testRunner.Then("I should be shown \"Pawn cannot move 2 spaces unless it is the first round and is " +
                    "on the home row.\"");
#line 28
testRunner.And("Pawn should be at D2");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn tries taking move when nothing to capture")]
        public virtual void PawnTriesTakingMoveWhenNothingToCapture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn tries taking move when nothing to capture", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
testRunner.Given("I have a White Pawn at D7");
#line 32
testRunner.And("I have a Black Knight at G8");
#line 33
testRunner.When("I move the Pawn to C8");
#line 34
testRunner.Then("I should be shown \"Pawn cannot move diagonally unless it is capturing a piece.\"");
#line 35
testRunner.And("Pawn should be at D7");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn moves illegally")]
        [NUnit.Framework.TestCaseAttribute("A1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("A2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("A3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("A4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("A5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("A6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("A7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("A8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("C1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("C2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("C3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("C4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("C5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("C6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("C7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("C8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("D1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("D2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("D3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("D4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("D5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("D6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("D7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("E1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("E2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("E3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("E4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("E5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("E6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("E7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("E8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("F1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("F2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("F3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("F4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("F5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("F6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("F7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("F8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("G1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("G2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("G3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("G4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("G5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("G6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("G7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("G8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("H1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("H2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("H3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("H4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("H5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("H6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("H7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("H8", new string[0])]
        public virtual void PawnMovesIllegally(string position, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn moves illegally", exampleTags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
testRunner.Given("I have a White Pawn at D7");
#line 39
testRunner.And("I have a Black Knight at G8");
#line 40
testRunner.And("the valid moves are D8");
#line 41
testRunner.When(string.Format("I move the Pawn to {0}", position));
#line 42
testRunner.Then("I should be shown \"illegal move\"");
#line 43
testRunner.And("Pawn should be at D7");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
